name: Build and push Docker images

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set IMAGE_TAG output
        run: echo "IMAGE_TAG=${{ github.run_number }}" >> $GITHUB_OUTPUT
        shell: bash
        id: set_tag
      
      - name: Build React image
        run: |
          export IMAGE_TAG=${{ github.run_number }}          
          docker build --platform=linux/amd64 \
            -t minjejin/coolman-manager-react:${IMAGE_TAG} \
            -f react-app/Dockerfile.prod .          
          docker push minjejin/coolman-manager-react:${IMAGE_TAG}

      - name: Build API image
        run: |
          IMAGE_TAG=${{ github.run_number }}    

          docker build --platform=linux/amd64 \
            -t minjejin/coolman-manager-api:${IMAGE_TAG} \
            ./api
          
          docker push minjejin/coolman-manager-api:${IMAGE_TAG}
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.COOLMAN_SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # 호스트 키 검증 비활성화 (운영은 known_hosts 사용하는게 좋지만)
          echo "Host 110.165.18.172
            StrictHostKeyChecking no
          " >> ~/.ssh/config

          # 테스트로 연결 확인
          ssh root@110.165.18.172 "echo 'Connected to server via GitHub Actions!'"

      - name: Deploy to Server
        env:
          IMAGE_TAG: ${{ steps.set_tag.outputs.IMAGE_TAG }}
        run: |
          ssh -o StrictHostKeyChecking=no root@110.165.18.172 "
            cd /root/coolman-manager && \

            # 1) .env에 IMAGE_TAG 업데이트 (기존값 교체 or 없으면 추가)
            sed -i 's/^IMAGE_TAG=.*/IMAGE_TAG=${IMAGE_TAG}/' .env || true && 
            grep -qxF 'IMAGE_TAG=${IMAGE_TAG}' .env || echo 'IMAGE_TAG=${IMAGE_TAG}' >> .env &&

            # 2) 새 이미지 Pull (react-app, api만)
            docker-compose -f docker-compose.prod.yml pull react-app api &&

            # 3) react-app, api만 중지 후 제거 (DB는 냅둠)
            docker-compose -f docker-compose.prod.yml stop react-app api &&
            docker-compose -f docker-compose.prod.yml rm -f react-app api &&

            # 4) 최신 이미지로 react-app, api 다시 기동
            docker-compose -f docker-compose.prod.yml up -d react-app api &&

            # 5) 사용되지 않는 이미지 청소
            docker image prune -a -f
          "